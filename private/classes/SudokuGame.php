<?php

namespace classes;

use BaseController as BC;
use classes\ViewHelper as VH;

class SudokuGame extends Game
{
    public const GAME_NAME = 'sudoku';

    public function __construct()
    {
        parent::__construct(QueueSudoku::class);
    }

    private static function cellsPlural(int $cellNum): string
    {
        return $cellNum === 1
            ? 'клетку'
            : ($cellNum <= 3 ? 'клетки' : 'клеток');
    }

    private static function ochkoPlural(int $numKeysSolved): string
    {
        return $numKeysSolved === 1
            ? 'очко'
            : ($numKeysSolved <= 3 ? 'очка' : 'очков');
    }

    public function submitTurn(): array
    {
        $numCellsSolved = 0;
        $numKeysSolved = 0;

        if ($this->gameStatus->desk->checkNewDesc(BC::$Request[BC::CELLS_PARAM])) {
            $turnRes = $this->gameStatus->desk->checkNewDigit($numCellsSolved);
            // Перенести в класс SudokuGame
            if ($turnRes === $this->gameStatus->desk::KEY_SOLVED_RESPONSE) {
                $this->gameStatus->users[$this->numUser]->score++;
                $numKeysSolved++;
                while ($this->gameStatus->desk->newSolvedKey($numKeysSolved)) {
                    $this->gameStatus->users[$this->numUser]->score++;
                    $numKeysSolved++;
                }
            }
            // todo добавить комментарий - ход удачный, ход неудачный
        }

        if ($numKeysSolved) {
            $this->addToLog(
                'Игрок' . ($this->numUser + 1) . ' получает ' . $numKeysSolved . ' ' . self::ochkoPlural($numKeysSolved)
            );
        }

        if ($numCellsSolved) {
            $this->addToLog(
                'Игрок' . ($this->numUser + 1) . ' открыл ' . ($numKeysSolved + $numCellsSolved) . ' '
                . self::cellsPlural($numKeysSolved + $numCellsSolved)
            );
        } else {
            $this->addToLog('Игрок' . ($this->numUser + 1) . ' ошибся');
        }

        if ($this->gameStatus->users[$this->numUser]->score >= $this->gameStatus->gameGoal) {
            $this->storeGameResults($this->User);
        } elseif($this->gameStatus->desk->hasUnopenedCells()) {
            $this->nextTurn();
        } else // Больше не осталось закрытых клеток - определяем победителя по очкам
            {
            if ($this->gameStatus->users[$this->numUser]->score >= $this->gameStatus->users[($this->numUser + 1) % 2]->score) {
                $winner = $this->User;
            } else {
                $winner = $this->gameStatus->users[($this->numUser + 1) % 2]->ID;
            }

            $this->storeGameResults($winner);
        }

        return parent::submitTurn(); // TODO: Change the autogenerated stub
    }

    private function getBriefRules(): string
    {
        return VH::div(
                'Действуют классические правила СУДОКУ - в блоке из девяти ячеек (по вертикали, по горизонтали и в квадрате 3х3) цифры не должны повторяться'
            )
            . VH::div(
                'Задача игроков - открыть черные квадраты, вычислив все 8 цифр в блоке - по вертикали ИЛИ по горизонтали ИЛИ в квадрате 3х3'
            )
            . VH::div(
                'Если игрок открыл ячейку (разгадал число в ней) и в блоке осталась только ОДНА закрытая цифра, то такая цифра открывается автоматически'
            )
            . VH::div(
                'Если после автоматического открытия числа на поле образуются новые блоки из ВОСЬМИ открытых ячеек, то такие блоки также открываются КАСКАДОМ'
            )
            . VH::div(
                'За один ход игрок может открыть несколько ячеек и несколько КЛЮЧЕЙ. Пользуйтесь правилом КАСКАДОВ'
            );
    }

    public function gameStarted($statusUpdateNeeded = false): array
    {
        $res = parent::gameStarted($statusUpdateNeeded);

        // Особенности создания конкретной игры | начало
        $numKeys = ceil($this->gameStatus->desk->getKeyCount() / 2);
        $this->gameStatus->gameGoal = $numKeys;

        $comment = 'Новая игра начата! <br />Набери <strong>' . $numKeys . '</strong> ' .
            ($numKeys <= 3 ? 'очка' : 'очков');
        $this->addToLog($comment);

        foreach ($this->gameStatus->users as $num => $user) {
            $user->addComment(
                VH::strong(
                    $num === $this->gameStatus->activeUser
                        ? 'Ваш ход!'
                        : 'Ваш ход следующий'
                )
                . VH::div($comment)
                . $this->getBriefRules()
            );
        }
        // Особенности создания конкретной игры | конец

        return $res;
    }

    public function newDesk(): Desk
    {
        return new DeskSudoku;
    }
}
